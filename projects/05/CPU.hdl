// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // Instruction bit in (top left corner)
    // if the instruction is an A instruction store it in the A register
    // else it is a C instruction - route the bits to the relevant parts of the CPU
    
    // if an instruction is a C this should return 1 otherwise it will be a 0 (A)
    And(a=instruction[15], b=true, out=aorc);
    // if the instruction is A write it into the a register otherwise keep the ALU output
    Mux16(a=instruction, b=aluout, sel=aorc, out=muxtoa);
    // instruction[5] determines if something is written to the A register
    ARegister(in=muxtoa, load=instruction[5], out=outa, out[0..14]=addressM);

    // ALU section
    Mux16(a=outa, b=inM, sel=instruction[12], out=inMcontrol);
    // C instructions jump bits determine the destination of the ALU
    // instruction[3] determines if something is written to M (RAM[A]) + instruction[15] is the C command
    And(a=instruction[3], b=instruction[15], out=writeM);
    // instruction[4] determines if something is written to the D register
    And(a=instruction[4], b=instruction[15], out=loadd);
    DRegister(in=aluout, load=loadd, out=outd);
    // C instruction has bits that refer to instructions to the ALU
    // instruction[6..11] refer to the inputs of the ALU
    ALU(x=outd, y=inMcontrol, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=aluout, zr=zr, ng=ng);

    // PC section (bottom)
    
    // create value for whether the output of the alu is positive
    Or(a=zr, b=ng, out=zeroornegative);
    Not(in=zeroornegative, out=ispositive);

    // if JEQ and out == 0
    And(a=instruction[1], b=zr, out=jeq);
    // if JLT and out < 0
    And(a=instruction[2], b=ng, out=jlt);
    // if JGT and out > 0
    And(a=instruction[0], b=ispositive, out=jgt);

    // Are any of the above values one
    Or(a=jeq, b=jlt, out=jeqorjlt);
    Or(a=jeqorjlt, b=jgt, out=jump);
 
    // if jump == 1 and instruction 15 == 1 (C) pcload will be one
    And(a=jump, b=instruction[15], out=pcload);
    // if load == 1, increment should be 0 otherwise it should be 1
    Not(in=pcload, out=increment);
    PC(in=outa, load=pcload, inc=increment, reset=reset, out[0..14]=pc);
}